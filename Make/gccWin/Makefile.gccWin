#
# Do NOT modify or remove this copyright and license
#
# Copyright (c) 2012 - 202 Seagate Technology LLC and/or its Affiliates, All Rights Reserved
#
# This software is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# ******************************************************************************************

# Hand Written Makefile (Edit with caution) - TOG
# Windows, MSYS2 64-bit, MinGW 64-bit, gcc environment version - TOG

NAME = opensea-parser
#Change the Major version when major interface changes are made. E.g. tDevice changes
MAJOR = 0
#Change the Minor version when new features are added.
MINOR = 0
#Change the patch version when only bug fixes are made.
PATCH = 0
VERSION = $(MAJOR).$(MINOR).$(PATCH)
SRC_DIR=../../src/
INC_DIR=-I../../include -I../../include/Seagate -I../../../opensea-common/include -I../../../libjson

MYUNAME := $(shell uname -s)
ifneq (,$(findstring Linux,$(MYUNAME)))
	UNAME = MINGW64
else ifneq (,$(findstring MINGW64,$(MYUNAME)))
	UNAME = MINGW64
endif

ifneq (,$(findstring Linux,$(MYUNAME)))
	CC = x86_64-w64-mingw32-gcc
	AR = x86_64-w64-mingw32-ar
else
	CC = gcc
	AR = ar
endif

#turning off format warnings because they are EVERYWHERE but only in minGW which is due to backwards compatibility warnings.
#I tried using __USE_MINGW_ANSI_STDIO, but this didn't solve the problem either. - TJE
#https://sourceforge.net/p/mingw-w64/mailman/mingw-w64-public/thread/20120411101049.GA4263%40glandium.org/#msg29128250
CFLAGS ?= -Wall -Wextra -Wno-format
CFLAGS += -c -fPIC -I. -std=gnu99

LDFLAGS = -Wall
LDLIBS = \
	../../../opensea-common/Make/gccWin/$(FILE_OUTPUT_DIR)/libopensea-common.a \

ifneq (,$(findstring MINGW64,$(UNAME)))
	#BR note: pragma comment(lib,"Version.lib") is not supported by gcc, use the below supply the version.lib functions
	LDFLAGS += -L/msys64/mingw64/x86_64-w64-mingw32/lib
	LDLIBS += -lversion
	LDLIBS += -lcfgmgr32
endif

LIB_SRC_FILES = \
    $(SRC_DIR)Opensea_Parser_Helper.cpp\
    $(SRC_DIR)CLog.cpp\
    $(SRC_DIR)CAta_Ext_DST_Log.cpp\
    $(SRC_DIR)CAta_Device_Stat_Log.cpp\
    $(SRC_DIR)CAta_Ext_Comprehensive_Log.cpp\
    $(SRC_DIR)CAta_Identify_Log.cpp\
    $(SRC_DIR)CAta_Power_Condition_Log.cpp\
    $(SRC_DIR)CAta_NCQ_Command_Error_Log.cpp\
    $(SRC_DIR)CAta_SMART_Log_Dir.cpp\
    $(SRC_DIR)CScsi_Log.cpp\
    $(SRC_DIR)CScsi_Application_Client_Log.cpp\
    $(SRC_DIR)CScsi_Background_Operation_Log.cpp\
    $(SRC_DIR)CScsi_Background_Scan_Log.cpp\
    $(SRC_DIR)CScsi_Cache_Statistics_Log.cpp\
    $(SRC_DIR)CScsi_Environmental_Logs.cpp\
    $(SRC_DIR)CScsi_Temperature_Log.cpp\
    $(SRC_DIR)CScsi_Error_Counter_Log.cpp\
    $(SRC_DIR)CScsi_Factory_Log.cpp\
    $(SRC_DIR)CScsi_Format_Status_Log.cpp\
    $(SRC_DIR)CScsi_Informational_Exeptions_Log.cpp\
    $(SRC_DIR)CScsi_Logical_Block_Provisioning_Log.cpp\
    $(SRC_DIR)CScsi_Non_Medium_Error_Count_Log.cpp\
    $(SRC_DIR)CScsi_Page_19h_Cache_Memory_Statistics_Log.cpp\
    $(SRC_DIR)CScsi_Page_19h_Command_Duration_Limits_Log.cpp\
    $(SRC_DIR)CScsi_Pending_Defects_Log.cpp\
    $(SRC_DIR)CScsi_Power_Condition_Transitions_Log.cpp\
    $(SRC_DIR)CScsi_Protocol_Specific_Port_Log.cpp\
    $(SRC_DIR)CScsi_Self_Test_Results_Log.cpp\
    $(SRC_DIR)CScsi_Solid_State_Drive_Log.cpp\
    $(SRC_DIR)CScsi_Start_Stop_Cycle_Counter_Log.cpp\
    $(SRC_DIR)CScsi_Supported_LogPages_Log.cpp\
    $(SRC_DIR)CScsi_Zoned_Device_Statistics_Log.cpp\


PROJECT_DEFINES += -DSTATIC_OPENSEA_PARSER
PROJECT_DEFINES += -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE



#All of the source files have associated object files
LIB_OBJ_FILES = $(LIB_SRC_FILES:.c=.o)
LIBS = lib$(NAME).a
#DEPFILES = $(LIB_SRC_FILES:.c=.d)

#-include $(DEPFILES)

FILE_OUTPUT_DIR = lib

.PHONY: all
all: clean mkoutputdir $(LIBS)

seasaw-libs:
%.o: %.c
	$(CC) $(CFLAGS) $(PROJECT_DEFINES) $(INC_DIR) $< -o $@

$(LIBS): $(LIB_OBJ_FILES) seasaw-libs
	rm -f $(FILE_OUTPUT_DIR)/$@
	$(AR) cq $(FILE_OUTPUT_DIR)/$@ $(LIB_OBJ_FILES)

	$(CC) -shared $(LIB_OBJ_FILES) $(LDFLAGS) $(LDLIBS) -o $(FILE_OUTPUT_DIR)/lib$(NAME).so.$(VERSION)
	@echo "============================================================"
	@echo "opensea-parser Makefile version: "$(VERSION)  "OS: "$(OS)
	@echo "============================================================"

clean:
	rm -f $(FILE_OUTPUT_DIR)/lib$(NAME).a $(FILE_OUTPUT_DIR)/lib$(NAME).so.$(VERSION) lib$(NAME).so *.o $(SRC_DIR)*.o
	rm -rf $(FILE_OUTPUT_DIR)
	@echo "============================================================"
	@echo "       CLEANED"
	@echo "============================================================"

mkoutputdir:
	mkdir -p $(FILE_OUTPUT_DIR)

done:
	@echo "============================================================"
	@echo "Build of opensea-parser has completed "
	@echo "============================================================"
